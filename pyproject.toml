[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name='cpg_seqr_loader'
description='Seqr-Loader (gVCF-combiner) implemented in CPG-Flow'
readme = "README.md"
# currently cpg-flow is pinned to this version
requires-python = ">=3.10,<3.11"
version='0.1.0'
license={"file" = "LICENSE"}
classifiers=[
    'Environment :: Console',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Operating System :: Unix',
    'Programming Language :: Python',
    'Topic :: Scientific/Engineering :: Bio-Informatics',
]

dependencies=[
#    alphagenome==0.1.0', removed because of protobuf incompatbility: hail==0.2.134 depends on protobuf==3.20.2 and all versions of alphagenome depend on 
#    protobuf>=5.28.3, we can conclude that all versions of alphagenome and hail==0.2.134 are incompatible. built in docker instead
    'cpg-flow==v0.3.2',
    'elasticsearch==9.0.2',
    'fsspec',
    'gcsfs',
    'hail==0.2.134',
    'hatchling',
]

[project.urls]
Repository = "https://github.com/populationgenomics/cpg-flow-seqr-loader"

[project.optional-dependencies]
test = [
    'bump-my-version',
    'pre-commit',
    'pytest',
]

[project.scripts]
# the workflow runner script - entrypoint for the pipeline
first_workflow = 'cpg_seqr_loader.first_workflow:cli_main'
full_workflow = 'cpg_seqr_loader.full_workflow:cli_main'

[tool.hatch.build.targets.wheel]
packages = ["src/cpg_seqr_loader"]

[tool.hatch.build.targets.wheel.sources]
"src" = ""

[options]
include_package_data = true

[options.package_data]
'cpg_seqr_loader'=  ['config_template.toml']

[tool.black]
line-length = 120
skip-string-normalization = true
exclude = '''
/(
  venv
  | \.mypy_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ['test']

[tool.ruff]
line-length = 120
extend-exclude = ["venv", ".mypy_cache", ".venv", "build", "dist"]

[tool.ruff.format]
indent-style = 'space'
quote-style = "single"

[tool.ruff.lint]
# ignore pydocstyle, flake8-boolean-trap (FBT)
select = ["A", "B", "C", "E", "F", "G", "I", "I001", "N", "Q", "S", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "I001", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

ignore = [
    "ANN001", # Missing type annotation for function argument
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN201", # Missing return type annotation for public function
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ANN204", # Missing type annotation for special method `__init__`
    "COM812", # Trailing comma prohibited
    "E731", # Do not assign a lambda expression, use a def
    "G004", # Logging statement uses f-string
    "PLW0603", # Using the global statement to update `<VAR>` is discouraged
    "Q000", # Single quotes found but double quotes preferred
    "PLR0912", # Too many branches (> 12)
    "PLR0913", # Too many arguments in function (> 5)
    "C901", # method is too complex (> 10 conditions)
    "N999", # invalid module name (not lower-case and potholes)
    "PLR2004", # Magic value used in comparison, consider replacing with a constant
]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "hail", "cpg", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
cpg = ["cpg_seqr_loader", "talos", "cpg-flow", "cpg-utils"]
hail = ["hail"]


[tool.ruff.lint.per-file-ignores]
# suppress the ARG002 "Unused method argument" warning in the stages.py file
## - we don't need generic cpg-flow arguments for every Stage, but need to fit the required method signature
"src/cpg_seqr_loader/stages.py" = ["ARG002"]
"src/cpg_seqr_loader/scripts/mt_to_es.py" = ["ANN202"]
"src/cpg_seqr_loader/scripts/annotate_cohort.py" = ["E501"]

[tool.bumpversion]
current_version = "0.1.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
commit = true
message = "Bump version: {current_version} â†’ {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version='{current_version}'"
replace = "version='{new_version}'"

[[tool.bumpversion.files]]
filename = "README.md"
search = "{current_version}"
replace = "{new_version}"
